Design Spec 0.2



Not only do we have code, we have tests! And, I've had a chance to play with
mongoDB. I'm starting to see further into the problems we're creating. It's
making me feel like writing spec. Lots and lots of spec. 

If spec is the strategy, then test is the tactics. Writing tests first *works*.
If I don't understand the problem well enough to write a test, then explain the
problem again, to yourself or to some totems. 


= Vectors, Relations, and Matrices =

We have this document database. We're going to string it up with relations and
try to make the sucker dance a bit. 

== Wordvectors ==

THE_LIST_OF_LISTS = ...

class Wordvector < Array
end

multiply 
  without parameters
  should create a 2x2 blank heading matrix

  with parameters (a block, probably invoked by Relation)
  permutes the arrays somehow
  creates a 2x2 blank heading matrix

add 
  should concatenate the vectors

There's a ... see, if this were a real magic typewriter, i could have scribbled
on a card, taken a picture, drop-boxed it to the cursor. Anyway, Wordvector +
Wordvector links them at their ends, and Wordvector * Wordvector creates a
Wordmatrix, which is, I s'pose, a web-editable grid of text boxes?

What are they good for? We dunno yet. Abstractly, they're just ordered pairs
that want to point to something. So, they generate hash keys. Who cares? What is
in the value of the keys? Submissions? Clickdata? Writing assignments?
Randomizations? a 'get_from_reader' that accepts a code block? A badge maker? 

This sort of open thinking is best done in analog. What else can I do here? 


== The Relation ==

The Relation is an object that keeps track of ordered pairs of textons. In
principle they could be any textons, but really, this is a relation which is
defined very carefully, one ordered pair at a time, out of the lists.

maybe x,y
  oh sure, these are totally related, yeah, i'll use these in visualizations
  or-- ohhh, sorry, not related anymore. I'll be needing that position point
  back...
  
relate x,y
  solid. I'll tell the db about it.


== Wordvectors and Wordmatrices ==

(yes, Wordvectors and Wordmatrices, but until you need real Vectors why not just
alias them to read like 'Vectors' and 'Matrices'?)

I wrote about a few special lists tonight. It's a list of lists. I can use the
list of lists to build matrices to fill and experiment with and show off.  In
the case that viewable matrices are small, their cells might gain and lose
position in some fitness dimension in order to be viewed. 

=== Ideas ===
matching and deranging related words
if x is in u and v, then x's position in u should not match x's position in v

pair_up
derange

if related? x, y, then snap one of them forward, 
the one that would move forward the least number of steps, so they match up.  
this matrix gains position. 

== Relation methods ==

accepts messages to relate x, y
  -> pattern
  <- pattern
  <-> pattern 
  y in x.pages

saves to database


I'm realizing that there's sort of... Commands, and Effects. 
Well, wait... There's textons, and then there's their relations, the ordered
pairs. The relation is empty, until either the Typist creates a relation or a
relation is created a bit down the chain. 

Matrices are not relations. If they were, you're on a trip to n^n land. Instead
they encourage and suggest relations; relations make their permutation space
smaller. 
